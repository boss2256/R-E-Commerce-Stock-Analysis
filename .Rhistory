# Function to perform Levene's test and t-test
compare_means <- function(data, stock1, stock2) {
data_subset <- data %>% filter(symbol %in% c(stock1, stock2))
levene_test <- tryCatch(leveneTest(daily_return ~ symbol, data = data_subset), error = function(e) NA)
levene_p_value <- if (!is.na(levene_test)) { levene_test$p.value } else { NA }
t_test <- if (!is.na(levene_p_value) && levene_p_value > 0.01) {
t.test(daily_return ~ symbol, data = data_subset, var.equal = TRUE)
} else {
t.test(daily_return ~ symbol, data = data_subset, var.equal = FALSE)
}
return(list(levene_test = levene_test, t_test = t_test))
}
# Compare returns between each pair of stocks
comparison_results <- list(
AMZN_vs_CASY = compare_means(stock_returns, "AMZN", "CASY"),
AMZN_vs_SBUX = compare_means(stock_returns, "AMZN", "SBUX"),
CASY_vs_SBUX = compare_means(stock_returns, "CASY", "SBUX")
)
# Load necessary packages
library(car)
library(tidyverse)
library(knitr)
# Function to perform Levene's test and t-test
compare_means <- function(data, stock1, stock2) {
data_subset <- data %>% filter(symbol %in% c(stock1, stock2))
levene_test <- tryCatch(leveneTest(daily_return ~ symbol, data = data_subset), error = function(e) NA)
levene_p_value <- if (!is.na(levene_test)) { levene_test$p.value } else { NA }
t_test <- if (!is.na(levene_p_value) && levene_p_value > 0.01) {
t.test(daily_return ~ symbol, data = data_subset, var.equal = TRUE)
} else {
t.test(daily_return ~ symbol, data = data_subset, var.equal = FALSE)
}
return(list(levene_test = levene_test, t_test = t_test))
}
# Compare returns between each pair of stocks
comparison_results <- list(
AMZN_vs_CASY = compare_means(stock_returns, "AMZN", "CASY"),
AMZN_vs_SBUX = compare_means(stock_returns, "AMZN", "SBUX"),
CASY_vs_SBUX = compare_means(stock_returns, "CASY", "SBUX")
)
# Perform t-tests for each stock
t_tests <- stock_returns %>%
group_by(symbol) %>%
summarize(
t_statistic = t.test(daily_return, mu = 0)$statistic,
p_value = t.test(daily_return, mu = 0)$p.value,
mean_return = mean(daily_return),
test_method = t.test(daily_return, mu = 0)$method,
df = t.test(daily_return, mu = 0)$parameter
)
# Display the t-test results
t_tests %>%
kable(caption = "T-Test Results for Average Daily Returns")
# Load necessary packages
library(car)
library(tidyverse)
library(knitr)
# Function to perform Levene's test and t-test
compare_means <- function(data, stock1, stock2) {
data_subset <- data %>% filter(symbol %in% c(stock1, stock2))
levene_test <- tryCatch(leveneTest(daily_return ~ symbol, data = data_subset), error = function(e) NA)
levene_p_value <- if (!is.na(levene_test)) { levene_test$p.value } else { NA }
t_test <- if (!is.na(levene_p_value) && levene_p_value > 0.01) {
t.test(daily_return ~ symbol, data = data_subset, var.equal = TRUE)
} else {
t.test(daily_return ~ symbol, data = data_subset, var.equal = FALSE)
}
return(list(levene_test = levene_test, t_test = t_test))
}
# Compare returns between each pair of stocks
comparison_results <- list(
AMZN_vs_CASY = compare_means(stock_returns, "AMZN", "CASY"),
AMZN_vs_SBUX = compare_means(stock_returns, "AMZN", "SBUX"),
CASY_vs_SBUX = compare_means(stock_returns, "CASY", "SBUX")
)
# Load necessary packages for additional statistics
library(car)
# Function to perform the t-test between two stocks
compare_means <- function(data, stock1, stock2) {
data1 <- data %>% filter(symbol == stock1)
data2 <- data %>% filter(symbol == stock2)
# Levene's Test for equality of variances
levene_test <- leveneTest(daily_return ~ symbol, data = rbind(data1, data2))
equal_var <- levene_test$`Pr(>F)`[1] > 0.01
# Perform t-test
t_test <- t.test(data1$daily_return, data2$daily_return, var.equal = equal_var)
return(list(
t_statistic = t_test$statistic,
p_value = t_test$p.value,
mean1 = mean(data1$daily_return),
mean2 = mean(data2$daily_return),
equal_var = equal_var,
df = t_test$parameter
))
}
# Compare returns between each pair of stocks
comparison_results <- list(
AMZN_vs_CASY = compare_means(stock_returns, "AMZN", "CASY"),
AMZN_vs_SBUX = compare_means(stock_returns, "AMZN", "SBUX"),
CASY_vs_SBUX = compare_means(stock_returns, "CASY", "SBUX")
)
# Convert results to a data frame for display
comparison_df <- do.call(rbind, lapply(comparison_results, function(x) data.frame(
t_statistic = x$t_statistic,
p_value = x$p_value,
mean1 = x$mean1,
mean2 = x$mean2,
equal_var = x$equal_var,
df = x$df
)))
# Add row names
rownames(comparison_df) <- names(comparison_results)
# Display the comparison results
comparison_df %>%
kable(caption = "Comparison of Mean Daily Returns Between Pairs of Stocks")
# Load necessary packages
library(car)
library(tidyverse)
library(knitr)
# Function to perform Levene's test and t-test
compare_means <- function(data, stock1, stock2) {
data_subset <- data %>% filter(symbol %in% c(stock1, stock2))
levene_test <- tryCatch(leveneTest(daily_return ~ symbol, data = data_subset), error = function(e) NA)
levene_p_value <- if (!is.na(levene_test)) { levene_test$p.value } else { NA }
t_test <- if (!is.na(levene_p_value) && levene_p_value > 0.01) {
t.test(daily_return ~ symbol, data = data_subset, var.equal = TRUE)
} else {
t.test(daily_return ~ symbol, data = data_subset, var.equal = FALSE)
}
return(list(levene_test = levene_test, t_test = t_test))
}
# Compare returns between each pair of stocks
comparison_results <- list(
AMZN_vs_CASY = compare_means(stock_returns, "AMZN", "CASY"),
AMZN_vs_SBUX = compare_means(stock_returns, "AMZN", "SBUX"),
CASY_vs_SBUX = compare_means(stock_returns, "CASY", "SBUX")
)
# Load necessary packages
library(car)
# Function to perform Levene's test and t-test
compare_means <- function(data, stock1, stock2) {
data_subset <- data %>% filter(symbol %in% c(stock1, stock2))
levene_test <- leveneTest(daily_return ~ symbol, data = data_subset)
levene_p_value <- ifelse(is.null(levene_test$p.value), NA, levene_test$p.value)
t_test <- if (levene_p_value > 0.01) {
t.test(daily_return ~ symbol, data = data_subset, var.equal = TRUE)
} else {
t.test(daily_return ~ symbol, data = data_subset, var.equal = FALSE)
}
return(list(levene_test = levene_test, t_test = t_test))
}
# Compare returns between each pair of stocks
comparison_results <- list(
AMZN_vs_CASY = compare_means(stock_returns, "AMZN", "CASY"),
AMZN_vs_SBUX = compare_means(stock_returns, "AMZN", "SBUX"),
CASY_vs_SBUX = compare_means(stock_returns, "CASY", "SBUX")
)
# Load necessary packages for additional statistics
library(car)
# Function to perform the t-test between two stocks
compare_means <- function(data, stock1, stock2) {
data1 <- data %>% filter(symbol == stock1)
data2 <- data %>% filter(symbol == stock2)
# Levene's Test for equality of variances
levene_test <- leveneTest(daily_return ~ symbol, data = rbind(data1, data2))
equal_var <- levene_test$`Pr(>F)`[1] > 0.01
# Perform t-test
t_test <- t.test(data1$daily_return, data2$daily_return, var.equal = equal_var)
return(list(
t_statistic = t_test$statistic,
p_value = t_test$p.value,
mean1 = mean(data1$daily_return),
mean2 = mean(data2$daily_return),
equal_var = equal_var,
df = t_test$parameter
))
}
# Compare returns between each pair of stocks
comparison_results <- list(
AMZN_vs_CASY = compare_means(stock_returns, "AMZN", "CASY"),
AMZN_vs_SBUX = compare_means(stock_returns, "AMZN", "SBUX"),
CASY_vs_SBUX = compare_means(stock_returns, "CASY", "SBUX")
)
# Convert results to a data frame for display
comparison_df <- do.call(rbind, lapply(comparison_results, function(x) data.frame(
t_statistic = x$t_statistic,
p_value = x$p_value,
mean1 = x$mean1,
mean2 = x$mean2,
equal_var = x$equal_var,
df = x$df
)))
# Add row names
rownames(comparison_df) <- names(comparison_results)
# Display the comparison results
comparison_df %>%
kable(caption = "Comparison of Mean Daily Returns Between Pairs of Stocks")
# Load necessary packages for additional statistics
library(car)
# Function to perform the t-test between two stocks
compare_means <- function(data, stock1, stock2) {
data1 <- data %>% filter(symbol == stock1)
data2 <- data %>% filter(symbol == stock2)
# Levene's Test for equality of variances
levene_test <- leveneTest(daily_return ~ symbol, data = rbind(data1, data2))
equal_var <- levene_test$`Pr(>F)`[1] > 0.01
# Perform t-test
t_test <- t.test(data1$daily_return, data2$daily_return, var.equal = equal_var)
return(list(
t_statistic = t_test$statistic,
p_value = t_test$p.value,
mean1 = mean(data1$daily_return),
mean2 = mean(data2$daily_return),
equal_var = equal_var,
df = t_test$parameter
))
}
# Compare returns between each pair of stocks
comparison_results <- list(
AMZN_vs_CASY = compare_means(stock_returns, "AMZN", "CASY"),
AMZN_vs_SBUX = compare_means(stock_returns, "AMZN", "SBUX"),
CASY_vs_SBUX = compare_means(stock_returns, "CASY", "SBUX")
)
# Convert results to a data frame for display
comparison_df <- do.call(rbind, lapply(comparison_results, function(x) data.frame(
t_statistic = x$t_statistic,
p_value = x$p_value,
mean1 = x$mean1,
mean2 = x$mean2,
equal_var = x$equal_var,
df = x$df
)))
# Add row names
rownames(comparison_df) <- names(comparison_results)
# Display the comparison results
comparison_df %>%
kable(caption = "Comparison of Mean Daily Returns Between Pairs of Stocks")
# Calculate the correlation matrix
correlation_matrix <- stock_returns %>%
select(symbol, daily_return) %>%
spread(symbol, daily_return) %>%
select(-date) %>%
cor(use = "complete.obs")
# Reshape the data using pivot_wider
wide_stock_returns <- stock_returns %>%
select(date, symbol, daily_return) %>%
pivot_wider(names_from = symbol, values_from = daily_return)
# Calculate the correlation matrix
correlation_matrix <- cor(wide_stock_returns[, -1], use = "complete.obs")
# Display the correlation matrix
correlation_matrix %>%
kable(caption = "Correlation Matrix of Daily Returns")
# Function to test the significance of correlations
test_correlation_significance <- function(correlation, n) {
t_statistic <- correlation * sqrt((n - 2) / (1 - correlation^2))
p_value <- 2 * pt(-abs(t_statistic), df = n - 2)
return(list(t_statistic = t_statistic, p_value = p_value))
}
# Number of observations
n <- nrow(wide_stock_returns)
# Apply the test to each pair of correlations
cor_test_results <- correlation_matrix %>%
as.data.frame() %>%
rownames_to_column(var = "Stock1") %>%
gather(Stock2, correlation, -Stock1) %>%
filter(Stock1 != Stock2) %>%
mutate(
test_result = map2(correlation, n, test_correlation_significance),
t_statistic = map_dbl(test_result, "t_statistic"),
p_value = map_dbl(test_result, "p_value")
) %>%
select(Stock1, Stock2, correlation, t_statistic, p_value)
# Display the correlation significance test results
cor_test_results %>%
kable(caption = "Significance Test of Correlations Between Daily Returns")
# Define expected returns and variances
expected_returns <- c(AMZN = mean(stock_returns %>% filter(symbol == "AMZN") %>% pull(daily_return)),
CASY = mean(stock_returns %>% filter(symbol == "CASY") %>% pull(daily_return)),
SBUX = mean(stock_returns %>% filter(symbol == "SBUX") %>% pull(daily_return)))
variances <- c(AMZN = var(stock_returns %>% filter(symbol == "AMZN") %>% pull(daily_return)),
CASY = var(stock_returns %>% filter(symbol == "CASY") %>% pull(daily_return)),
SBUX = var(stock_returns %>% filter(symbol == "SBUX") %>% pull(daily_return)))
covariances <- cov(wide_stock_returns[, -1])
# Function to calculate happiness
calculate_happiness <- function(w1, r1, r2, var1, var2, cov12) {
w2 <- 1 - w1
portfolio_return <- w1 * r1 + w2 * r2
portfolio_variance <- w1^2 * var1 + w2^2 * var2 + 2 * w1 * w2 * cov12
happiness <- portfolio_return - portfolio_variance
return(happiness)
}
# Function to optimize weights
optimize_portfolio <- function(stock1, stock2) {
r1 <- expected_returns[stock1]
r2 <- expected_returns[stock2]
var1 <- variances[stock1]
var2 <- variances[stock2]
cov12 <- covariances[stock1, stock2]
result <- optimize(calculate_happiness, c(0, 1),
r1 = r1, r2 = r2, var1 = var1, var2 = var2, cov12 = cov12,
maximum = TRUE)
w1 <- result$maximum
w2 <- 1 - w1
optimal_happiness <- result$objective
return(list(stock1 = stock1, stock2 = stock2, w1 = w1, w2 = w2, happiness = optimal_happiness))
}
# Optimize portfolios for each pair of stocks
portfolio_1 <- optimize_portfolio("AMZN", "CASY")
portfolio_2 <- optimize_portfolio("AMZN", "SBUX")
portfolio_3 <- optimize_portfolio("CASY", "SBUX")
# Combine results into a data frame
optimal_portfolios <- data.frame(
Stock1 = c(portfolio_1$stock1, portfolio_2$stock1, portfolio_3$stock1),
Stock2 = c(portfolio_1$stock2, portfolio_2$stock2, portfolio_3$stock2),
Weight1 = c(portfolio_1$w1, portfolio_2$w1, portfolio_3$w1),
Weight2 = c(portfolio_1$w2, portfolio_2$w2, portfolio_3$w2),
Happiness = c(portfolio_1$happiness, portfolio_2$happiness, portfolio_3$happiness)
)
# Display the optimal portfolios
optimal_portfolios %>%
kable(caption = "Optimal Portfolios and Their Happiness")
# Define expected returns and variances
expected_returns <- c(AMZN = mean(stock_returns %>% filter(symbol == "AMZN") %>% pull(daily_return)),
CASY = mean(stock_returns %>% filter(symbol == "CASY") %>% pull(daily_return)),
SBUX = mean(stock_returns %>% filter(symbol == "SBUX") %>% pull(daily_return)))
variances <- c(AMZN = var(stock_returns %>% filter(symbol == "AMZN") %>% pull(daily_return)),
CASY = var(stock_returns %>% filter(symbol == "CASY") %>% pull(daily_return)),
SBUX = var(stock_returns %>% filter(symbol == "SBUX") %>% pull(daily_return)))
covariances <- cov(wide_stock_returns[, -1])
# Function to calculate portfolio return and variance
calculate_portfolio_metrics <- function(w1, r1, r2, var1, var2, cov12) {
w2 <- 1 - w1
portfolio_return <- w1 * r1 + w2 * r2
portfolio_variance <- w1^2 * var1 + w2^2 * var2 + 2 * w1 * w2 * cov12
return(list(return = portfolio_return, variance = portfolio_variance))
}
# Function to calculate happiness
calculate_happiness <- function(w1, r1, r2, var1, var2, cov12) {
metrics <- calculate_portfolio_metrics(w1, r1, r2, var1, var2, cov12)
happiness <- metrics$return - metrics$variance
return(happiness)
}
# Function to optimize weights
optimize_portfolio <- function(stock1, stock2) {
r1 <- expected_returns[stock1]
r2 <- expected_returns[stock2]
var1 <- variances[stock1]
var2 <- variances[stock2]
cov12 <- covariances[stock1, stock2]
result <- optimize(calculate_happiness, c(0, 1),
r1 = r1, r2 = r2, var1 = var1, var2 = var2, cov12 = cov12,
maximum = TRUE)
w1 <- result$maximum
w2 <- 1 - w1
optimal_happiness <- result$objective
return(list(stock1 = stock1, stock2 = stock2, w1 = w1, w2 = w2, happiness = optimal_happiness))
}
# Optimize portfolios for each pair of stocks
portfolio_1 <- optimize_portfolio("AMZN", "CASY")
portfolio_2 <- optimize_portfolio("AMZN", "SBUX")
portfolio_3 <- optimize_portfolio("CASY", "SBUX")
# Combine results into a data frame
optimal_portfolios <- data.frame(
Stock1 = c(portfolio_1$stock1, portfolio_2$stock1, portfolio_3$stock1),
Stock2 = c(portfolio_1$stock2, portfolio_2$stock2, portfolio_3$stock2),
Weight1 = c(portfolio_1$w1, portfolio_2$w1, portfolio_3$w1),
Weight2 = c(portfolio_1$w2, portfolio_2$w2, portfolio_3$w2),
Happiness = c(portfolio_1$happiness, portfolio_2$happiness, portfolio_3$happiness)
)
# Display the optimal portfolios
optimal_portfolios %>%
kable(caption = "Optimal Portfolios and Their Happiness")
# Define expected returns and variances
expected_returns <- c(AMZN = mean(stock_returns %>% filter(symbol == "AMZN") %>% pull(daily_return)),
CASY = mean(stock_returns %>% filter(symbol == "CASY") %>% pull(daily_return)),
SBUX = mean(stock_returns %>% filter(symbol == "SBUX") %>% pull(daily_return)))
variances <- c(AMZN = var(stock_returns %>% filter(symbol == "AMZN") %>% pull(daily_return)),
CASY = var(stock_returns %>% filter(symbol == "CASY") %>% pull(daily_return)),
SBUX = var(stock_returns %>% filter(symbol == "SBUX") %>% pull(daily_return)))
covariances <- cov(wide_stock_returns[, -1])
# Function to calculate portfolio return and variance
calculate_portfolio_metrics <- function(w1, r1, r2, var1, var2, cov12) {
w2 <- 1 - w1
portfolio_return <- w1 * r1 + w2 * r2
portfolio_variance <- w1^2 * var1 + w2^2 * var2 + 2 * w1 * w2 * cov12
return(list(return = portfolio_return, variance = portfolio_variance))
}
# Function to calculate happiness
calculate_happiness <- function(w1, r1, r2, var1, var2, cov12) {
metrics <- calculate_portfolio_metrics(w1, r1, r2, var1, var2, cov12)
happiness <- metrics$return - metrics$variance
return(happiness)
}
# Function to optimize weights
optimize_portfolio <- function(stock1, stock2) {
r1 <- expected_returns[stock1]
r2 <- expected_returns[stock2]
var1 <- variances[stock1]
var2 <- variances[stock2]
cov12 <- covariances[stock1, stock2]
result <- optimize(calculate_happiness, c(0, 1),
r1 = r1, r2 = r2, var1 = var1, var2 = var2, cov12 = cov12,
maximum = TRUE)
w1 <- result$maximum
w2 <- 1 - w1
optimal_happiness <- result$objective
return(list(stock1 = stock1, stock2 = stock2, w1 = w1, w2 = w2, happiness = optimal_happiness))
}
# Optimize portfolios for each pair of stocks
portfolio_1 <- optimize_portfolio("AMZN", "CASY")
portfolio_2 <- optimize_portfolio("AMZN", "SBUX")
portfolio_3 <- optimize_portfolio("CASY", "SBUX")
# Combine results into a data frame
optimal_portfolios <- data.frame(
Stock1 = c(portfolio_1$stock1, portfolio_2$stock1, portfolio_3$stock1),
Stock2 = c(portfolio_1$stock2, portfolio_2$stock2, portfolio_3$stock2),
Weight1 = c(portfolio_1$w1, portfolio_2$w1, portfolio_3$w1),
Weight2 = c(portfolio_1$w2, portfolio_2$w2, portfolio_3$w2),
Happiness = c(portfolio_1$happiness, portfolio_2$happiness, portfolio_3$happiness)
)
# Display the optimal portfolios
optimal_portfolios %>%
kable(caption = "Optimal Portfolios and Their Happiness")
# Define expected returns and variances
expected_returns <- c(AMZN = mean(stock_returns %>% filter(symbol == "AMZN") %>% pull(daily_return)),
CASY = mean(stock_returns %>% filter(symbol == "CASY") %>% pull(daily_return)),
SBUX = mean(stock_returns %>% filter(symbol == "SBUX") %>% pull(daily_return)))
variances <- c(AMZN = var(stock_returns %>% filter(symbol == "AMZN") %>% pull(daily_return)),
CASY = var(stock_returns %>% filter(symbol == "CASY") %>% pull(daily_return)),
SBUX = var(stock_returns %>% filter(symbol == "SBUX") %>% pull(daily_return)))
covariances <- cov(wide_stock_returns[, -1])
# Print the expected returns and variances
print(expected_returns)
print(variances)
print(covariances)
# Function to calculate portfolio return and variance
calculate_portfolio_metrics <- function(w1, r1, r2, var1, var2, cov12) {
w2 <- 1 - w1
portfolio_return <- w1 * r1 + w2 * r2
portfolio_variance <- w1^2 * var1 + w2^2 * var2 + 2 * w1 * w2 * cov12
return(list(return = portfolio_return, variance = portfolio_variance))
}
# Validate calculations for a sample pair
sample_metrics <- calculate_portfolio_metrics(0.5, expected_returns["AMZN"], expected_returns["CASY"], variances["AMZN"], variances["CASY"], covariances["AMZN", "CASY"])
print(sample_metrics)
# Function to calculate happiness
calculate_happiness <- function(w1, r1, r2, var1, var2, cov12) {
metrics <- calculate_portfolio_metrics(w1, r1, r2, var1, var2, cov12)
happiness <- metrics$return - metrics$variance
return(happiness)
}
# Validate happiness calculation for a sample pair
sample_happiness <- calculate_happiness(0.5, expected_returns["AMZN"], expected_returns["CASY"], variances["AMZN"], variances["CASY"], covariances["AMZN", "CASY"])
print(sample_happiness)
# Function to optimize weights
optimize_portfolio <- function(stock1, stock2) {
r1 <- expected_returns[stock1]
r2 <- expected_returns[stock2]
var1 <- variances[stock1]
var2 <- variances[stock2]
cov12 <- covariances[stock1, stock2]
result <- optimize(calculate_happiness, c(0, 1),
r1 = r1, r2 = r2, var1 = var1, var2 = var2, cov12 = cov12,
maximum = TRUE)
w1 <- result$maximum
w2 <- 1 - w1
optimal_happiness <- result$objective
return(list(stock1 = stock1, stock2 = stock2, w1 = w1, w2 = w2, happiness = optimal_happiness))
}
# Optimize portfolios for each pair of stocks
portfolio_1 <- optimize_portfolio("AMZN", "CASY")
portfolio_2 <- optimize_portfolio("AMZN", "SBUX")
portfolio_3 <- optimize_portfolio("CASY", "SBUX")
# Combine results into a data frame
optimal_portfolios <- data.frame(
Stock1 = c(portfolio_1$stock1, portfolio_2$stock1, portfolio_3$stock1),
Stock2 = c(portfolio_1$stock2, portfolio_2$stock2, portfolio_3$stock2),
Weight1 = c(portfolio_1$w1, portfolio_2$w1, portfolio_3$w1),
Weight2 = c(portfolio_1$w2, portfolio_2$w2, portfolio_3$w2),
Happiness = c(portfolio_1$happiness, portfolio_2$happiness, portfolio_3$happiness)
)
# Display the optimal portfolios
optimal_portfolios %>%
kable(caption = "Optimal Portfolios and Their Happiness")
knitr::opts_chunk$set(echo = TRUE, message= FALSE, warning = FALSE, tidy.opts = list(width.cutoff = 90), tidy = TRUE )
rm(list=ls(all=TRUE)) # this code clears all output from your Environment
# packages
library(tidyquant) # for importing stock data
library(tidyverse)   # for working with data
# library(broom)     # for tidying output from various statistical procedures
library(knitr)       # for tables
# library(kableExtra)  # for improving the appearance of tables
# Add any additional packages that you use to this code chunk
# packages
library(tidyquant) # for importing stock data
library(tidyverse)   # for working with data
library(broom)     # for tidying output from various statistical procedures
library(knitr)       # for tables
library(kableExtra)  # for improving the appearance of tables
install.packages("kableExtra")
install.packages(c("highr", "knitr", "quantreg", "RcppArmadillo", "SparseM", "urca"))
knitr::opts_chunk$set(echo = TRUE, message= FALSE, warning = FALSE, tidy.opts = list(width.cutoff = 90), tidy = TRUE )
rm(list=ls(all=TRUE)) # this code clears all output from your Environment
# packages
library(tidyquant) # for importing stock data
library(tidyverse)   # for working with data
library(broom)     # for tidying output from various statistical procedures
library(knitr)       # for tables
install.packages("knitr")
install.packages("rmarkdown")
# packages
library(knitr)       # Load knitr first
